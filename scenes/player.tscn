[gd_scene load_steps=10 format=3 uid="uid://cuxg835ieti4n"]

[ext_resource type="Script" uid="uid://tr66h8uhdbnd" path="res://scripts/player.gd" id="1_p0vlq"]

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_3vyb7"]
albedo_color = Color(0, 0.603922, 1, 1)

[sub_resource type="CapsuleMesh" id="CapsuleMesh_5q5h1"]
material = SubResource("StandardMaterial3D_3vyb7")

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_5q5h1"]

[sub_resource type="SceneReplicationConfig" id="SceneReplicationConfig_3vyb7"]
properties/0/path = NodePath(".:rotation:y")
properties/0/spawn = false
properties/0/replication_mode = 1
properties/1/path = NodePath(".:target_pos")
properties/1/spawn = false
properties/1/replication_mode = 1

[sub_resource type="GDScript" id="GDScript_3vyb7"]
script/source = "extends MultiplayerSynchronizer

@export var filter_enabled: bool = true

var clients_send_to: Array[int] = []

func filter(id: int) -> bool:
	return (
		not filter_enabled
		or id in clients_send_to
	)

func _ready() -> void:
	add_visibility_filter(filter)
	
	if not get_parent().is_multiplayer_authority():
		return

	Network.ready_to_send_to.connect(func(id: int):
		if id not in clients_send_to:
			Network.rpc_id(id, \"_ready_to_send_to\", multiplayer.get_unique_id())
			clients_send_to.append(id)
	)
	
	Network.remove_player.connect(func(id: int):
		clients_send_to.erase(id)
	)
"

[sub_resource type="BoxMesh" id="BoxMesh_3vyb7"]
size = Vector3(0.4, 0.2, 0.5)

[sub_resource type="SceneReplicationConfig" id="SceneReplicationConfig_g2els"]
properties/0/path = NodePath(".:health")
properties/0/spawn = true
properties/0/replication_mode = 1
properties/1/path = NodePath(".:stamina")
properties/1/spawn = true
properties/1/replication_mode = 1
properties/2/path = NodePath(".:position")
properties/2/spawn = true
properties/2/replication_mode = 1

[sub_resource type="GDScript" id="GDScript_qhqgy"]
script/source = "extends MultiplayerSynchronizer
# This synces data we dont want other clients to know, but that server has to know to save state
# This has a interval of 0.033s so it synces every second frame

func filter(id: int) -> bool:
	return id == 1

func _ready() -> void:
	add_visibility_filter(filter)
"

[node name="Player" type="CharacterBody3D" groups=["Player"]]
script = ExtResource("1_p0vlq")

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
mesh = SubResource("CapsuleMesh_5q5h1")

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
shape = SubResource("CapsuleShape3D_5q5h1")

[node name="Camera3D" type="Camera3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.608455, 0)

[node name="RayCast3D" type="RayCast3D" parent="Camera3D" groups=["PlayerRaycast"]]
target_position = Vector3(0, 0, -3)
collision_mask = 3

[node name="ShortRaycast" type="RayCast3D" parent="Camera3D" groups=["PlayerRaycast"]]
target_position = Vector3(0, 0, -1.5)
collision_mask = 3

[node name="MultiplayerSynchronizer" type="MultiplayerSynchronizer" parent="."]
replication_interval = 0.033
delta_interval = 0.033
replication_config = SubResource("SceneReplicationConfig_3vyb7")
script = SubResource("GDScript_3vyb7")

[node name="Eyes" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.608, -0.261153)
mesh = SubResource("BoxMesh_3vyb7")

[node name="Hold" type="Node3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.490938, 0.223552, -0.505612)

[node name="ServerOnlySync" type="MultiplayerSynchronizer" parent="."]
replication_interval = 0.033
delta_interval = 0.033
replication_config = SubResource("SceneReplicationConfig_g2els")
public_visibility = false
script = SubResource("GDScript_qhqgy")
